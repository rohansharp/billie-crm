/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    customers: Customer;
    conversations: Conversation;
    applications: Application;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    customers: CustomersSelect<false> | CustomersSelect<true>;
    conversations: ConversationsSelect<false> | ConversationsSelect<true>;
    applications: ApplicationsSelect<false> | ApplicationsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'admin' | 'supervisor';
  firstName: string;
  lastName: string;
  avatar?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers".
 */
export interface Customer {
  id: string;
  customerId: string;
  /**
   * Mr, Mrs, Ms, Dr, etc.
   */
  title?: string | null;
  /**
   * Name customer prefers to be called
   */
  preferredName?: string | null;
  firstName?: string | null;
  middleName?: string | null;
  lastName?: string | null;
  fullName?: string | null;
  emailAddress?: string | null;
  mobilePhoneNumber?: string | null;
  dateOfBirth?: string | null;
  residentialAddress?: {
    street?: string | null;
    city?: string | null;
    state?: string | null;
    postcode?: string | null;
    country?: string | null;
  };
  /**
   * Address for mail delivery (e.g., cards)
   */
  mailingAddress?: {
    street?: string | null;
    city?: string | null;
    state?: string | null;
    postcode?: string | null;
    country?: string | null;
  };
  /**
   * Indicates if customer is a staff member
   */
  staffFlag?: boolean | null;
  /**
   * Indicates if customer is an investor
   */
  investorFlag?: boolean | null;
  /**
   * Indicates if customer is a founder
   */
  founderFlag?: boolean | null;
  /**
   * eKYC identifier from Frankie
   */
  ekycEntityId?: string | null;
  /**
   * Status of eKYC attempt
   */
  ekycStatus?: ('successful' | 'failed' | 'pending') | null;
  /**
   * Lifecycle status of the individual
   */
  individualStatus?: ('LIVING' | 'DECEASED' | 'MISSING') | null;
  identityDocuments?:
    | {
        documentType: 'DRIVERS_LICENCE' | 'PASSPORT' | 'MEDICARE';
        /**
         * e.g., Medicare Card Colour
         */
        documentSubtype?: string | null;
        documentNumber: string;
        expiryDate?: string | null;
        stateOfIssue?: string | null;
        countryOfIssue?: string | null;
        /**
         * Additional document information as key-value pairs
         */
        additionalInfo?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  applications?: (string | Application)[] | null;
  conversations?: (string | Conversation)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "applications".
 */
export interface Application {
  id: string;
  applicationNumber: string;
  customerId: string | Customer;
  loanPurpose?: string | null;
  loanAmount?: number | null;
  /**
   * Calculated at 5% of loan amount
   */
  loanFee?: number | null;
  /**
   * Loan amount + fee
   */
  loanTotalPayable?: number | null;
  /**
   * Loan term in days/months
   */
  loanTerm?: number | null;
  customerAttestationAcceptance?: boolean | null;
  statementCaptureConsentProvided?: boolean | null;
  statementCaptureCompleted?: boolean | null;
  productOfferAcceptance?: boolean | null;
  applicationOutcome?: ('pending' | 'approved' | 'declined' | 'withdrawn') | null;
  applicationProcess?: {
    /**
     * Current stage in the application process
     */
    currentProcessStage?: string | null;
    /**
     * Current step within the stage
     */
    currentProcessStep?: string | null;
    startedAt?: string | null;
    updatedAt?: string | null;
    applicationProcessState?:
      | {
          stageName: string;
          complete?: boolean | null;
          prompt?: string | null;
          steps?:
            | {
                stepName: string;
                description?: string | null;
                complete?: boolean | null;
                type?: ('llm' | 'business_logic' | 'user_input') | null;
                completionEventName?: string | null;
                /**
                 * Frontend input type hint
                 */
                answerInputType?: string | null;
                prompts?: {
                  main?: string | null;
                  completenessCheck?: string | null;
                  confirmation?: string | null;
                  outputJson?: string | null;
                  mappingOut?:
                    | {
                        [k: string]: unknown;
                      }
                    | unknown[]
                    | string
                    | number
                    | boolean
                    | null;
                };
                businessLogic?: {
                  moduleName?: string | null;
                  methodName?: string | null;
                  mappingIn?:
                    | {
                        [k: string]: unknown;
                      }
                    | unknown[]
                    | string
                    | number
                    | boolean
                    | null;
                  mappingOut?:
                    | {
                        [k: string]: unknown;
                      }
                    | unknown[]
                    | string
                    | number
                    | boolean
                    | null;
                };
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    conversation?:
      | {
          role?: ('user' | 'assistant' | 'system') | null;
          content?: string | null;
          timestamp?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Risk and serviceability assessments
   */
  assessments?: {
    /**
     * Identity risk assessment results
     */
    identityRisk?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Serviceability assessment results
     */
    serviceability?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    /**
     * Fraud check results
     */
    fraudCheck?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  /**
   * Agent notes and updates
   */
  noticeboard?:
    | {
        agentName: string;
        content: string;
        timestamp: string;
        versions?:
          | {
              content?: string | null;
              timestamp?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  conversations?: (string | Conversation)[] | null;
  version?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conversations".
 */
export interface Conversation {
  id: string;
  conversationId: string;
  applicationNumber: string;
  customerId: string | Customer;
  applicationId: string | Application;
  status?: ('active' | 'paused' | 'soft_end' | 'hard_end' | 'approved' | 'declined') | null;
  startedAt: string;
  updatedAt: string;
  utterances?:
    | {
        /**
         * Usually "customer" or "assistant"
         */
        username?: string | null;
        utterance: string;
        /**
         * Internal reasoning for assistant responses
         */
        rationale?: string | null;
        createdAt: string;
        updatedAt?: string | null;
        /**
         * Frontend input type hint (e.g. address, email)
         */
        answerInputType?: string | null;
        /**
         * Previous sequence number in conversation
         */
        prevSeq?: number | null;
        endConversation?: boolean | null;
        /**
         * Additional data for frontend enrichment
         */
        additionalData?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Conversation purpose from summary
   */
  purpose?: string | null;
  /**
   * Key facts from conversation summary
   */
  facts?:
    | {
        fact?: string | null;
        id?: string | null;
      }[]
    | null;
  version?: number | null;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'customers';
        value: string | Customer;
      } | null)
    | ({
        relationTo: 'conversations';
        value: string | Conversation;
      } | null)
    | ({
        relationTo: 'applications';
        value: string | Application;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  firstName?: T;
  lastName?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers_select".
 */
export interface CustomersSelect<T extends boolean = true> {
  customerId?: T;
  title?: T;
  preferredName?: T;
  firstName?: T;
  middleName?: T;
  lastName?: T;
  fullName?: T;
  emailAddress?: T;
  mobilePhoneNumber?: T;
  dateOfBirth?: T;
  residentialAddress?:
    | T
    | {
        street?: T;
        city?: T;
        state?: T;
        postcode?: T;
        country?: T;
      };
  mailingAddress?:
    | T
    | {
        street?: T;
        city?: T;
        state?: T;
        postcode?: T;
        country?: T;
      };
  staffFlag?: T;
  investorFlag?: T;
  founderFlag?: T;
  ekycEntityId?: T;
  ekycStatus?: T;
  individualStatus?: T;
  identityDocuments?:
    | T
    | {
        documentType?: T;
        documentSubtype?: T;
        documentNumber?: T;
        expiryDate?: T;
        stateOfIssue?: T;
        countryOfIssue?: T;
        additionalInfo?: T;
        id?: T;
      };
  applications?: T;
  conversations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conversations_select".
 */
export interface ConversationsSelect<T extends boolean = true> {
  conversationId?: T;
  applicationNumber?: T;
  customerId?: T;
  applicationId?: T;
  status?: T;
  startedAt?: T;
  updatedAt?: T;
  utterances?:
    | T
    | {
        username?: T;
        utterance?: T;
        rationale?: T;
        createdAt?: T;
        updatedAt?: T;
        answerInputType?: T;
        prevSeq?: T;
        endConversation?: T;
        additionalData?: T;
        id?: T;
      };
  purpose?: T;
  facts?:
    | T
    | {
        fact?: T;
        id?: T;
      };
  version?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "applications_select".
 */
export interface ApplicationsSelect<T extends boolean = true> {
  applicationNumber?: T;
  customerId?: T;
  loanPurpose?: T;
  loanAmount?: T;
  loanFee?: T;
  loanTotalPayable?: T;
  loanTerm?: T;
  customerAttestationAcceptance?: T;
  statementCaptureConsentProvided?: T;
  statementCaptureCompleted?: T;
  productOfferAcceptance?: T;
  applicationOutcome?: T;
  applicationProcess?:
    | T
    | {
        currentProcessStage?: T;
        currentProcessStep?: T;
        startedAt?: T;
        updatedAt?: T;
        applicationProcessState?:
          | T
          | {
              stageName?: T;
              complete?: T;
              prompt?: T;
              steps?:
                | T
                | {
                    stepName?: T;
                    description?: T;
                    complete?: T;
                    type?: T;
                    completionEventName?: T;
                    answerInputType?: T;
                    prompts?:
                      | T
                      | {
                          main?: T;
                          completenessCheck?: T;
                          confirmation?: T;
                          outputJson?: T;
                          mappingOut?: T;
                        };
                    businessLogic?:
                      | T
                      | {
                          moduleName?: T;
                          methodName?: T;
                          mappingIn?: T;
                          mappingOut?: T;
                        };
                    id?: T;
                  };
              id?: T;
            };
        conversation?:
          | T
          | {
              role?: T;
              content?: T;
              timestamp?: T;
              id?: T;
            };
      };
  assessments?:
    | T
    | {
        identityRisk?: T;
        serviceability?: T;
        fraudCheck?: T;
      };
  noticeboard?:
    | T
    | {
        agentName?: T;
        content?: T;
        timestamp?: T;
        versions?:
          | T
          | {
              content?: T;
              timestamp?: T;
              id?: T;
            };
        id?: T;
      };
  conversations?: T;
  version?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}